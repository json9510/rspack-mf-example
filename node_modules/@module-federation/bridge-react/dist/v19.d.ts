import { default as default_2 } from 'react';
import * as React_2 from 'react';

export declare function createBridgeComponent<T = any>(bridgeInfo: Omit<ProviderFnParams<T>, 'createRoot'>): () => {
    render(info: RenderParams): Promise<void>;
    destroy(info: DestroyParams): void;
};

export declare interface CreateRootOptions {
    identifierPrefix?: string;
    onRecoverableError?: (error: unknown, errorInfo: unknown) => void;
    transitionCallbacks?: unknown;
}

/**
 * Options for creating a React root
 */
declare interface CreateRootOptions_2 {
    identifierPrefix?: string;
    onRecoverableError?: (error: unknown) => void;
    transitionCallbacks?: unknown;
}

/**
 * Parameters for the destroy function
 */
export declare interface DestroyParams {
    moduleName: string;
    dom: HTMLElement;
}

/**
 * Parameters for the provider function
 */
export declare interface ProviderFnParams<T> {
    rootComponent: React_2.ComponentType<T>;
    render?: (App: React_2.ReactElement, id?: HTMLElement | string) => RootType | Promise<RootType>;
    createRoot?: (container: Element | DocumentFragment, options?: CreateRootOptions_2) => Root_2;
    /**
     * Default options to pass to createRoot for React 18 and 19
     * These options will be used when creating a root unless overridden by rootOptions in render params
     * @example
     * {
     *   identifierPrefix: 'app-',
     *   onRecoverableError: (err) => console.error(err)
     * }
     */
    defaultRootOptions?: CreateRootOptions_2;
}

/**
 * Parameters for the provider function
 */
export declare interface ProviderParams {
    moduleName?: string;
    basename?: string;
    memoryRoute?: {
        entryPath: string;
        initialState?: Record<string, unknown>;
    };
    style?: React_2.CSSProperties;
    className?: string;
}

/**
 * Parameters for the render function
 */
export declare interface RenderParams {
    moduleName?: string;
    basename?: string;
    memoryRoute?: {
        entryPath: string;
        initialState?: Record<string, unknown>;
    };
    dom: HTMLElement;
    /**
     * Options to pass to createRoot for React 18 and 19
     * @example
     * {
     *   identifierPrefix: 'app-',
     *   onRecoverableError: (err) => console.error(err)
     * }
     */
    rootOptions?: CreateRootOptions_2;
    [key: string]: unknown;
}

export declare interface Root {
    render(children: default_2.ReactNode): void;
    unmount(): void;
}

/**
 * Interface for a React root object
 */
declare interface Root_2 {
    render(children: React_2.ReactNode): void;
    unmount(): void;
}

/**
 * Type for a root element, which can be either an HTMLElement or a React root
 */
export declare type RootType = HTMLElement | Root_2;

export { }

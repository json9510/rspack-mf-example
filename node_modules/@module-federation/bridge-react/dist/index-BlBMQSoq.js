import React__default from "react";
const RouterContext = React__default.createContext(null);
const BROWSER_LOG_KEY = "FEDERATION_DEBUG";
const BROWSER_LOG_VALUE = "1";
function isBrowserEnv() {
  return typeof window !== "undefined" && typeof window.document !== "undefined";
}
function isBrowserDebug() {
  try {
    if (isBrowserEnv() && window.localStorage) {
      return localStorage.getItem(BROWSER_LOG_KEY) === BROWSER_LOG_VALUE;
    }
  } catch (error) {
    return false;
  }
  return false;
}
function isDebugMode() {
  if (typeof process !== "undefined" && process.env && process.env["FEDERATION_DEBUG"]) {
    return Boolean(process.env["FEDERATION_DEBUG"]);
  }
  if (typeof FEDERATION_DEBUG !== "undefined" && Boolean(FEDERATION_DEBUG)) {
    return true;
  }
  return isBrowserDebug();
}
let Logger = class Logger2 {
  setPrefix(prefix) {
    this.prefix = prefix;
  }
  log(...args) {
    console.log(this.prefix, ...args);
  }
  warn(...args) {
    console.log(this.prefix, ...args);
  }
  error(...args) {
    console.log(this.prefix, ...args);
  }
  success(...args) {
    console.log(this.prefix, ...args);
  }
  info(...args) {
    console.log(this.prefix, ...args);
  }
  ready(...args) {
    console.log(this.prefix, ...args);
  }
  debug(...args) {
    if (isDebugMode()) {
      console.log(this.prefix, ...args);
    }
  }
  constructor(prefix) {
    this.prefix = prefix;
  }
};
function createLogger(prefix) {
  return new Logger(prefix);
}
const LoggerInstance = createLogger(
  "[ Module Federation Bridge React ]"
);
function pathJoin(...args) {
  const res = args.reduce((res2, path) => {
    let nPath = path;
    if (!nPath || typeof nPath !== "string") {
      return res2;
    }
    if (nPath[0] !== "/") {
      nPath = `/${nPath}`;
    }
    const lastIndex = nPath.length - 1;
    if (nPath[lastIndex] === "/") {
      nPath = nPath.substring(0, lastIndex);
    }
    return res2 + nPath;
  }, "");
  return res || "/";
}
const getModuleName = (id) => {
  if (!id) {
    return id;
  }
  const idArray = id.split("/");
  if (idArray.length < 2) {
    return id;
  }
  return idArray[0] + "/" + idArray[1];
};
const getRootDomDefaultClassName = (moduleName) => {
  if (!moduleName) {
    return "";
  }
  const name = getModuleName(moduleName).replace(/\@/, "").replace(/\//, "-");
  return `bridge-root-component-${name}`;
};
export {
  LoggerInstance as L,
  RouterContext as R,
  getRootDomDefaultClassName as g,
  pathJoin as p
};
